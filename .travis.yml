## YAML Template.
language: php

notifications:
  email:
    on_success: never
    on_failure: change

branches:
  only:
    - master

cache:
  - composer
  - $HOME/.composer/cache

matrix:
  include:
#    - php: 7.1
#      env: WP_VERSION=latest
#    - php: 7.0
#      env: WP_VERSION=latest
#    - php: 5.6
#      env: WP_VERSION=4.4
    - php: 5.6
      env: WP_VERSION=latest
    - php: 5.6
      env: WP_VERSION=trunk
    - php: 5.6
      env: WP_TRAVISCI=phpcs

before_script:
  - export PATH="$HOME/.composer/vendor/bin:$PATH"
  - |
    if [[ ! -z "$WP_VERSION" ]] ; then
      bash bin/install-wp-tests.sh wordpress_test root '' localhost $WP_VERSION
      if [[ ${TRAVIS_PHP_VERSION:0:2} == "7." ]]; then
        composer global require "phpunit/phpunit=5.7.*"
      else
        composer global require "phpunit/phpunit=4.8.*"
      fi
    fi
  - |
    if [[ "$WP_TRAVISCI" == "phpcs" ]] ; then
        export PHPCS_DIR=/tmp/phpcs;
        export SNIFFS_DIR=/tmp/sniffs;
        # Install PHP_CodeSniffer.
        git clone -b master --depth 1 https://github.com/squizlabs/PHP_CodeSniffer.git $PHPCS_DIR
        # Install WordPress Coding Standards.
        git clone -b master --depth 1 https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards.git $SNIFFS_DIR;
        # Set install path for WordPress Coding Standards.
        $PHPCS_DIR/bin/phpcs --config-set installed_paths $SNIFFS_DIR;
        # After CodeSniffer install you should refresh your path.
        phpenv rehash;
        ## composer global require wp-coding-standards/wpcs
        ## phpcs --config-set installed_paths $HOME/.composer/vendor/wp-coding-standards/wpcs
    fi

script:
  - |
    if [[ ! -z "$WP_VERSION" ]] ; then
      phpunit
      WP_MULTISITE=1 phpunit
    fi
  - |
    if [[ "$WP_TRAVISCI" == "phpcs" ]] ; then
      ##$PHPCS_DIR/bin/phpcs . --standard=phpcs.xml.dist;
      ## $PHPCS_DIR/bin/phpcs -p . --standard=WordPress-Extra;
      ## phpcs --standard=phpcs.ruleset.xml $(find . -name '*.php')
      phpcs --standard=phpcs.xml.dist $(find . -name '*.php')
    fi
